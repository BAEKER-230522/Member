server:
  port: 8081

spring:
  profiles:
    default: dev

  data:
    redis:
      host: redis
      port: 6379

  application:
    name: baeker-member

  security:
    oauth2:
      resourceserver:
        jwt:
          jwk-set-uri: https://kauth.kakao.com/.well-known/jwks.json
      client:
        registration:
          kakao:
            clientId: ENC(0HCojoXJI2AP2Y71MdgjJ8uH7iJLBtyBEOtBkTrteQMu46fZXaJRcikg1KQLA4US)
            client-secret: ENC(Wv7Qf1vhum0OG8DS6XF3fvPxWk8mMsd75TdRzcxN3IsFMc2uHjsF50jm7cNHgsFO)
            scope: account_email, profile_nickname, profile_image, openid
            client-name: kakao
            authorization-grant-type: authorization_code
            redirect-uri: http://${custom.server}:8081/login/oauth2/code/kakao
            client-authentication-method: POST

        provider:
          kakao:
            jwk-set-uri: https://kauth.kakao.com/.well-known/jwks.json
            authorization-uri: https://kauth.kakao.com/oauth/authorize
            token-uri: https://kauth.kakao.com/oauth/token
            user-info-uri: https://kapi.kakao.com/v1/oidc/userinfo
#            user-name-attribute: openid
            issuer-uri: https://kauth.kakao.com
  mvc:
    hidden-method:
      filter:
        enabled: true

  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://127.0.0.1:3306/bk__member?useUnicode=true&characterEncoding=utf8&autoReconnect=true&serverTimezone=Asia/Seoul
    username: ENC(MrlF9UZUaHufCgWLRE3ipQ==)
    password: ENC(dhw6nRBS+50xHhqPVFnZdw==)

  jpa:
    hibernate:
      ddl-auto: create
    properties:
      hibernate:
        format_sql: true
        show_sql: true

  kafka:
    bootstrap-servers: ${custom.server}:9092
    consumer:
      group-id: member
      auto-offset-reset: earliest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.apache.kafka.common.serialization.StringSerializer
      linger:
        ms: 10

cloud:
  aws:
    credentials:
      access-key: ENC(STIByR/5dds/1MwRIrr0M9JR2yx4wX/OzrBusb1TRuM=)
      secret-key: ENC(aUDadAx1wtJza2duGCwYmYJ04lzNi33fjA8fHtde1qyeWrshkvrvdMtIFtLn5jKy1Adj7UmMTPM=)
    s3:
      bucket: ${custom.bucket}
      storage: ${custom.storage}
    region:
      static: ap-northeast-2
    stack:
      auto: false


message:
  topic:
    member: "member"
    study: "study"
    solved-member: "solved-member"

eureka:
  instance:

    # IP 와 서버 포트를 통해 Id 설정
    instance-id: ${custom.server}:${server.port}
    prefer-ip-address: true

  client:
    register-with-eureka: true
    fetch-registry: true
    service-url:
      # Eureka 서버 주소 (만약 2개 이상일경우 , 를 통해 연속 입력)
      defaultZone: http://${custom.server}:8761/eureka

logging.level:
  org.hibernate:
    SQL: debug
    orm.jdbc.bind: trace

custom:
  front:
    url: http://localhost:3000
  server: 101.101.208.240
  storage: ENC(ILubO430i175pGOuVoODag==)
  bucket: ENC(oPnco32AvTLYRwP9ScYf+hXyLU2AT5v+)
  feign:
    solved: http://101.101.208.240:8084/api/solved

  jwt:
    secret-key: ENC(+GbV3Ykx/t5XFlaFHBZnXTzsSf9b3YChS2cVPTvCgwQmevtbB1Hfw91VMC/fTizxVssJvYiAMeQICsuoSrH5zNLh/jxJsXq/)

jasypt:
  encryptor:
    bean: jasyptStringEncryptor

